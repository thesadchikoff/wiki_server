// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id            String  @id @default(uuid())
  refresh_token String
  user          User?   @relation(fields: [user_id], references: [id])
  user_id       String? @unique

  @@map("refresh_tokens")
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  password             String
  refresh_token        RefreshToken?
  notes                Notes[]
  categories           Categories[]
  isAdmin              Boolean          @default(false) @map("is_admin")
  moderatedContent     Categories[]     @relation(name: "moderated_content")
  ModerActionLog       ModerActionLog[]
  usefulNotes          Notes[]          @relation(name: "usefull_content")
  emailNotification    Boolean          @default(true)
  telegramNotification Boolean          @default(false)

  createdAt       DateTime         @default(now()) @map("created_at")
  TelegramAccount TelegramAccount?
  File            File[]

  @@map("users")
}

model TelegramAccount {
  id             String  @id @default(uuid())
  username       String
  telegramUserId String  @map("telegram_user_id")
  avatarUrl      String?
  user           User?   @relation(fields: [userId], references: [id])
  userId         String? @unique @map("user_id")

  @@map("telegram_account")
}

model PreRegisterUser {
  id         String @id @default(uuid())
  email      String @unique
  password   String
  verifyCode String @unique @map("verify_code")
  writeCount Int    @default(0) @map("write_count")

  @@map("pre_register_user")
}

model Notes {
  id           String      @id @default(uuid())
  title        String
  content      String
  author       User?       @relation(fields: [userId], references: [id])
  userId       String?     @map("user_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @map("categories_id")
  isAccepted   Boolean     @default(false) @map("is_accept")
  isEdited     Boolean     @default(false) @map("is_edited")
  oldContent   String?     @map("old_content")
  isActual     Boolean     @default(true)
  isPinned     Boolean     @default(false)
  User         User[]      @relation(name: "usefull_content")

  @@map("notes")
}

model Categories {
  id               String   @id @default(uuid())
  title            String
  iconUrl          String   @map("icon_url")
  angle            Int
  bannerColorLeft  String   @map("banner_color_left")
  bannerColorRight String   @map("banner_color_right")
  notes            Notes[]
  author           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId           String?  @map("user_id")
  moderators       User[]   @relation(name: "moderated_content")
  createdAt        DateTime @default(now())

  @@map("categories")
}

model ModerActionLog {
  id          String          @id @default(uuid())
  type        ModerActionType
  moderator   User?           @relation(fields: [moderatorId], references: [id], onDelete: SetNull)
  moderatorId String?         @map("moderator_id")
  createdAt   DateTime        @default(now()) @map("created_at")
}

enum ModerActionType {
  ACCEPT
  UNACCEPT
}

model File {
  id        String  @id @default(uuid())
  fileName  String  @map("file_name")
  fileUrl   String  @map("file_url")
  author    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  size      Int
  userId    String? @map("user_id")
  isVisible Boolean @default(false) @map("is_visible")

  createdAt DateTime @default(now()) @map("created_at")
}
